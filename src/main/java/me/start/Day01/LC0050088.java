package me.start.Day01;

/**
 * 88. 合并两个有序数组
 * 给你两个按 非递减顺序 排列的整数数组nums1 和 nums2，
 * 另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
 * 请你 合并 nums2 到 nums1 中，
 * 使合并后的数组同样按 非递减顺序 排列。
 * 注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。
 * 为了应对这种情况，nums1 的初始长度为 m + n，
 * 其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。
 * nums2 的长度为 n 。
 * 示例 1：
 * 输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
 * 输出：[1,2,2,3,5,6]
 * 解释：需要合并 [1,2,3] 和 [2,5,6] 。
 * 合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。
 */
public class LC0050088 {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        // 从头开始遍历，会造成字符阻塞，而nums1的后n位为0，
        // 所以从后往前，不会造成覆盖未遍历字符的情况
        int i = m - 1, j = n - 1; // 从最后一个有效字符开始遍历
        int merge = m + n - 1; // 从nums1的最后一位开始覆盖
        while(j >= 0) {
            // 结束条件是以第二个数组全都插入进去为止
            // 因为当2结束时，1只需要保留在原位置就好
            // 但反过来则不行
            if (i < 0) {
                // 在if else中一定要注意包含关系，
                // 最后的else的情况要考虑到，
                // 如果并不会用到所有情况，那么谨慎else
                nums1[merge--] = nums2[j--];
            } else if (nums1[i] >= nums2[j]) {
                nums1[merge--] = nums1[i--];
            } else if (nums1[i] < nums2[j]){
                nums1[merge--] = nums2[j--];
            }
        }
    }
}
