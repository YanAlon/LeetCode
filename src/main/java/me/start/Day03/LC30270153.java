package me.start.Day03;

/**
 * 153. 寻找旋转排序数组中的最小值
 * 已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。
 * 例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
 * 若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
 * 若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
 * 注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的
 * 结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。
 * 给你一个元素值 互不相同 的数组 nums ，
 * 它原来是一个升序排列的数组，并按上述情形进行了多次旋转。
 * 请你找出并返回数组中的 最小元素 。
 * 你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。
 * 示例 1：
 * 输入：nums = [3,4,5,1,2]
 * 输出：1
 * 解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
 */
public class LC30270153 {
    // 如果中值 < 右值，则最小值在左半边，可以收缩右边界。
    // 如果中值 > 右值，则最小值在右半边，可以收缩左边界。
    public int findMin(int[] nums) {
        int l = 0, r = nums.length - 1;
        while (l <= r) {
            int mid = l + (r - l) / 2; // 防止溢出
            if (nums[mid] > nums[r]) {
                l = mid + 1;
                // 为什么l+1，而r不-1？
                // 为了避免错过小值，因为移动l时，mid是大值
                // 而移动r时，mid是小值，如果mid-1，可能错过mid恰好是最小值的情况
            } else {
                r = mid;
            }
        }
        return nums[l];
    }
}
