package me.start.Day06;

/**
 * 37. 解数独
 * 编写一个程序，通过填充空格来解决数独问题。
 * 数独的解法需 遵循如下规则：
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 示例 1：
 * 输入：board = [["5","3",".",".","7",".",".",".","."],
 *               ["6",".",".","1","9","5",".",".","."],
 *               [".","9","8",".",".",".",".","6","."],
 *               ["8",".",".",".","6",".",".",".","3"],
 *               ["4",".",".","8",".","3",".",".","1"],
 *               ["7",".",".",".","2",".",".",".","6"],
 *               [".","6",".",".",".",".","2","8","."],
 *               [".",".",".","4","1","9",".",".","5"],
 *               [".",".",".",".","8",".",".","7","9"]]
 * 输出：[["5","3","4","6","7","8","9","1","2"],
 *       ["6","7","2","1","9","5","3","4","8"],
 *       ["1","9","8","3","4","2","5","6","7"],
 *       ["8","5","9","7","6","1","4","2","3"],
 *       ["4","2","6","8","5","3","7","9","1"],
 *       ["7","1","3","9","2","4","8","5","6"],
 *       ["9","6","1","5","3","7","2","8","4"],
 *       ["2","8","7","4","1","9","6","3","5"],
 *       ["3","4","5","2","8","6","1","7","9"]]
 */
public class LC60520037 {
    public void solveSudoku(char[][] board) {
        if (board == null || board.length != 9 || board[0].length != 9) return;
        // 记录行列方块内是否使用了1-9
        boolean[][] row = new boolean[9][9], col = new boolean[9][9], box = new boolean[9][9];
        // 预处理，先获取已经使用的数字
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (board[i][j] == '.') continue;
                // num 是1-9在boolean中的索引，分别对应0-8
                // 可用于索引box的序号
                int num = board[i][j] - '1', k = (i / 3) * 3 + j / 3;
                // 走到这说明数字已使用，对应的3个boolean进行标记
                row[i][num] = col[j][num] = box[k][num] = true;
            }
        }
        // 开始递归，数字字符，n是计数:最终为81，行，列，方块
        solveSudokuHelper(board, 0, row, col, box);
    }

    boolean solveSudokuHelper(char[][] board, int n, boolean[][] row, boolean[][] col, boolean[][] box) {
        // 当n到达81，说明所有数都填好了，数独完成
        if (n == 81) {
            return true;
        }
        // 先行再列，/ 除运算得到商，表示已经填了多少行
        //         % 模运算得到余数，表示已经填了当前行的少位
        //         而n作为索引就是下一位
        int i = n / 9, j = n % 9;
        if (board[i][j] != '.') { // 注意这里是!=
            return solveSudokuHelper(board, n + 1, row, col, box);
        }
        // 如果此处未填数，再算k，避免冗余计算
        int k = (i / 3) * 3 + j / 3;
        // 从0开始尝试
        for (int num = 0; num < 9; num++) { // 从0开始，方便索引
            // 当存在于行列方块中的任意一个内，则不行，进下一个尝试，直到结束，但这并不意味着胜利
            if (row[i][num] || col[j][num] || box[k][num]) continue;
            // 当都不在，说明合适，填入board中
            board[i][j] = (char) (num + '1'); // num为索引，填入时+1
            row[i][num] = col[j][num] = box[k][num] = true; // boolean标记已使用

            if (solveSudokuHelper(board, n + 1, row, col, box)) return true;
            // 如果存在错误填写，回溯
            row[i][num] = col[j][num] = box[k][num] = false;
        }
        // 如果9个数尝试完成，仍有未填入的空位，则返回false
        // 这意味着有填错的地方，此时for循环中无法进入倒数第2行的if，执行最后一行的回溯
        board[i][j] = '.';
        return false;
    }
}
