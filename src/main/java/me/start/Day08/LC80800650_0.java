package me.start.Day08;

/**
 * 650. 只有两个键的键盘
 * 最初记事本上只有一个字符 'A' 。你每次可以对这个记事本进行两种操作：
 * Copy All（复制全部）：复制这个记事本中的所有字符（不允许仅复制部分字符）。
 * Paste（粘贴）：粘贴 上一次 复制的字符。
 * 给你一个数字 n ，你需要使用最少的操作次数，
 * 在记事本上输出 恰好 n 个 'A' 。返回能够打印出 n 个 'A' 的最少操作次数。
 * 示例 1：
 * 输入：3
 * 输出：3
 * 解释：
 * 最初, 只有一个字符 'A'。
 * 第 1 步, 使用 Copy All 操作。
 * 第 2 步, 使用 Paste 操作来获得 'AA'。
 * 第 3 步, 使用 Paste 操作来获得 'AAA'。
 */
public class LC80800650_0 {
    // 数学。
    // 如果我们将「1 次 Copy All + x 次 Paste」看做一次“动作”的话。
    // 那么 一次“动作”所产生的效果就是将原来的字符串变为原来的 x+1 倍。
    // 最终的最小操作次数方案可以等价以下操作流程
    // 1.起始对长度为 1 的记事本字符进行 1 次 Copy All + k1 ? 1 次 Paste 操作
    // （消耗次数为 k1，得到长度为k1 的记事本长度）；
    // 2.对长度为为k1 的记事本字符进行 1 次 Copy All + k2 ? 1 次 Paste 操作
    // （消耗次数为 k1 + k2 ，得到长度为 k1 ? k2 的记事本长度）
    // ...
    // 最终经过 k 次“动作”之后，得到长度为 n 的记事本长度，即有：
    //      n = k1 ? k2 ?...? kx
    // 问题转化为：如何对 n 进行拆分，可以使得 k1 + k2 +...+ kx 最小
    // 对于任意一个 ki（合数）而言，根据定理 a?b>=a+b 可知进一步的拆分必然不会导致结果变差。
    //因此，我们只需要使用「试除法」对 n 执行分解质因数操作，累加所有的操作次数，即可得到答案。
    public int minSteps(int n) {
        int ans = 0;
        for (int i = 2; i * i <= n; i++) {
            while (n % i == 0) {
                ans += i;
                n /= i;
            }
        }
        if (n != 1) ans += n;
        return ans;
    }
}
